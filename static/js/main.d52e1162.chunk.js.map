{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","withoutSorting","sortField","setSortField","reverseField","setReverseField","visibleGoods","goods","preparedGoods","sort","good1","good2","alphabetically","localeCompare","byLength","length","reverse","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,kBAAAA,E,sBAAAA,E,mBAAAA,M,KAiCE,IAAME,EAAM,WACjB,MAAkCC,mBAASH,EAASI,gBAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCH,oBAAS,GAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KACMC,EA9BR,SACEC,EAAiBL,EAAqBE,GAEtC,IAAMI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,eACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,SACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAOLS,CAAiBnB,EAAiBI,EAAWE,GAG/C,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IACE,SACA,UACA,CAAE,WAAYlB,IAAcL,EAASe,iBAGzCS,QAAS,WACPlB,EAAaN,EAASe,iBAV1B,iCAgBA,wBACEO,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,WAAYlB,IAAcL,EAASiB,WAGzCO,QAAS,WACPlB,EAAaN,EAASiB,WAV1B,4BAgBA,wBACEK,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,YAAahB,IAGnBiB,QAAS,WACPhB,GAAiBD,IAVrB,sBAgBEF,GAAaE,IACb,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPlB,EAAaN,EAASI,gBACtBI,GAAgB,IALpB,sBAaJ,6BAEIC,EAAagB,KAAI,SAAAC,GAAI,OACnB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YC7HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d52e1162.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  withoutSorting = '',\n  alphabetically = 'name',\n  byLength = 'length',\n}\n\nfunction getPreparedGoods(\n  goods: string[], sortField: SortType, reverseField: boolean,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.alphabetically:\n          return good1.localeCompare(good2);\n\n        case SortType.byLength:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(SortType.withoutSorting);\n  const [reverseField, setReverseField] = useState(false);\n  const visibleGoods = (\n    getPreparedGoods(goodsFromServer, sortField, reverseField)\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-info',\n              { 'is-light': sortField !== SortType.alphabetically },\n            )\n          }\n          onClick={() => {\n            setSortField(SortType.alphabetically);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-success',\n              { 'is-light': sortField !== SortType.byLength },\n            )\n          }\n          onClick={() => {\n            setSortField(SortType.byLength);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-warning',\n              { 'is-light': !reverseField },\n            )\n          }\n          onClick={() => {\n            setReverseField(!reverseField);\n          }}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField(SortType.withoutSorting);\n              setReverseField(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {\n          visibleGoods.map(good => (\n            <li\n              data-cy=\"Good\"\n              key={good}\n            >\n              {good}\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}